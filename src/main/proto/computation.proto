// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
import "google/protobuf/any.proto";
import "tensorEntity.proto";

option java_multiple_files = true;
option java_package = "io.grpc.learning.computation";
option java_outer_classname = "ComputationProto";
option objc_class_prefix = "COMP";

package computation;

// The greeting service definition.
service Computation {
  // Sends a computation
  rpc Call (ComputationRequest) returns (ComputationReply) {}

  rpc CallValue (ComputationRequest) returns (TensorValue) {}

  rpc Compute(TensorValue) returns(ValueReply) {}

  rpc CallModel (ClientRequest) returns (Model) {}
  rpc CallModelWeights (ClientRequest) returns (ModelWeights) {}
  rpc ComputeWeights(ModelWeights) returns(ValueReply){}

  rpc CallLayerWeights (LayerWeightsRequest) returns (LayerWeights) {}
  rpc ComputeLayerWeights(LayerWeights) returns(ValueReply){}
  rpc ComputeFinish(ClientRequest) returns(ValueReply){}
}

message ClientRequest{
  string id = 1;
}

message LayerWeightsRequest{
  string id = 1;
  int64 layer_id = 2;
  int64 idx =3;
  bool split = 4;
}

message LayerWeights{
  TensorProto tensor = 1;
  int64 layer_id = 2;
  int64 part =3;
  string id = 4;
}

message Model {
  string message = 1;
  // The Computation graph
  // Stores a bytes message.
  bytes graph = 2;
  repeated Layer layer = 4;
  repeated Meta meta = 5;
  int32 round = 3;
}


message Layer{
  string layer_name = 1;
  string layer_init_name = 3;
  string layer_shape = 2;
  string layer_trainable_shape = 4;
}

message Meta{
  string meta_name =1;
  string meta_shape =2;
}


message ModelWeights{
  repeated TensorProto tensor = 1;
}


// The request message containing the user's id.
message ComputationRequest {
  // The client id of remote device
  string id = 1;
  // The request node name in AST
  string node_name = 2;

  int32 offset = 3;

  string action = 4;

}



message ComputationReply {
  // The response message containing the computation graph
  // The compomnents of the result will then all be simultaneously evaluated in
  // what corresponds to a single Session.run() in non-eager mode.

  // NOTE: Currently, there is no way to represent any higher-level scripting
  // over the graph. We require that all control flow logic be expressed using
  // control dependencies and other TensorFlow constructs and triggered by the
  // evaluation of outputs within a single Session.run()

  // A serialized representation of a TensorFlow graph to execute.
  //
  string message = 1;
  // The Computation graph
  // Stores a bytes message.
  bytes graph = 2;
  // Each client should
  int32 round = 3;
}

// This is for training
message TensorValue{

  string id = 1;

  string name = 2;

  int32 value_size = 3;

  int32 offset = 4;

  repeated float list_array = 5;

  repeated int32 shape_array = 6;

  repeated int32 assign_shape_array = 10;

  TrainableVarName trainable_name = 7;

  repeated string assign_name = 8;

  repeated string placeholder = 9;

  string node_name = 11;

  Metrics metrics = 12;
}

//
message TrainableVarName{
  string name = 1;
  string target_name = 2;
}

//
message ValueReply{
  bool message = 1;
}

message Metrics{
  repeated string name = 1;
  repeated float value = 2;
  float weights = 3;
}
