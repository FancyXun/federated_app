plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.8'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'

    id 'java'

//    id 'com.github.johnrengelman.shadow' version '4.0.3'
}

mainClassName = 'io.grpc.learning.computation.ComputationServer'

repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public"}
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/" }
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.31.1' // CURRENT_GRPC_VERSION
def protobufVersion = '3.12.0'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    // https://mvnrepository.com/artifact/org.tensorflow/tensorflow
//    implementation "org.tensorflow:tensorflow${tensorflowVersion}"
    compile group: 'org.tensorflow', name: 'tensorflow', version: '1.13.1'
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.12.2'
    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    compile group: 'com.opencsv', name: 'opencsv', version: '5.2'
    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.68'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.3.2.RELEASE'
    // https://mvnrepository.com/artifact/org.quartz-scheduler/quartz
    compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'
    // https://mvnrepository.com/artifact/org.springframework/spring-context-support
    compile group: 'org.springframework', name: 'spring-context-support', version: '5.2.8.RELEASE'
    // https://mvnrepository.com/artifact/org.springframework/spring-tx
    compile group: 'org.springframework', name: 'spring-tx', version: '5.2.8.RELEASE'
    // https://mvnrepository.com/artifact/com.google.cloud/google-cloud-logging-logback
    compile group: 'com.google.cloud', name: 'google-cloud-logging-logback', version: '0.116.0-alpha'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.3.3.RELEASE'

    // https://mvnrepository.com/artifact/org.jetbrains.bio/npy
    compile group: 'org.jetbrains.bio', name: 'npy', version: '0.3.3'

    compileOnly "org.apache.tomcat:annotations-api:6.0.53"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.28.2"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task computationServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.learning.computation.ComputationServer'
    applicationName = 'computation-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task LRComputationServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.learning.computation.LRComputationServer'
    applicationName = 'LRComputation-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task computationClient(type: CreateStartScripts) {
    mainClassName = 'io.grpc.learning.computation.ComputationClient'
    applicationName = 'computation-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(computationServer)
    from(computationClient)
    fileMode = 0755
}

//jar {
//    manifest {
//        attributes(
//                "Manifest-Version": 1.0,
//                "Main-Class": "io.grpc.learning.computation.ComputationServer"
//        )
//    }
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    into('lib') {
//        from configurations.runtime
//    }
//}